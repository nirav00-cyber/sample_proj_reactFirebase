{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nirav\\\\Desktop\\\\react_firebase\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport AddMovie from './AddMovie';\nconst url = 'https://reactapp-1d176-default-rtdb.firebaseio.com';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch({\n        url\n      });\n\n      if (!response.ok) {\n        throw new Error('something went wrong');\n      }\n\n      const data = await response.json();\n      console.log(data);\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler, setMovies]);\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, \"Found No Movies\");\n  if (error) content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, error);\n  if (isLoading) content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, \"Loading...\");\n  if (movies.length > 0) content = /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  });\n\n  async function AddMovieHandler(movie) {\n    const response = await fetch({\n      url\n    }, {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'first-project-6f7ba-default-rtdb'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: AddMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/nirav/Desktop/react_firebase/src/App.js"],"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","url","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","console","log","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","content","length","AddMovieHandler","movie","method","body","JSON","stringify","headers"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useCallback} from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport AddMovie from './AddMovie';\n\n\nconst url = 'https://reactapp-1d176-default-rtdb.firebaseio.com';\nfunction App() {\n  \n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () =>\n  {\n    setIsLoading(true);\n    setError(null);\n\n    try\n    {\n      const response = await fetch({url});\n      if (!response.ok)\n      {\n        throw new Error('something went wrong');\n      }\n      const data = await response.json();\n      console.log(data); \n\n      const transformedMovies = data.results.map((movieData) =>\n      {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        }\n      })\n      setMovies(transformedMovies);\n\n       \n    }\n    catch (error)\n    {\n      setError(error);\n    }\n\n    setIsLoading(false);\n  }, []);\n\n\n  useEffect(() =>\n  {\n    fetchMoviesHandler();\n  },[fetchMoviesHandler,setMovies])\n\n  let content = <p>Found No Movies</p>\n  if (error)\n    content = <p>{error}</p>\n  if (isLoading)\n    content = <p>Loading...</p>\n  if (movies.length > 0)\n    content = <MoviesList movies={movies}></MoviesList>\n  async function AddMovieHandler(movie)\n  { \n    const response = await fetch({url}, {\n      method: 'POST',\n      body: JSON.stringify(movie),\n      headers: {\n        'Content-Type': 'first-project-6f7ba-default-rtdb'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={AddMovieHandler}></AddMovie>\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n      {content}\n      </section>\n    </React.Fragment>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}